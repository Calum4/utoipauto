name: publish

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  utoipauto-core:
    runs-on: ubuntu-latest
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get releasing version
        working-directory: utoipauto-core
        run: echo NEXT_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_ENV

      - name: Check published version
        run: echo PREV_VERSION=$(cargo search utoipauto-core --limit 1 | sed -nE 's/^[^"]*"//; s/".*//1p' -) >> $GITHUB_ENV

      - name: Cargo login
        if: env.NEXT_VERSION != env.PREV_VERSION
        run: cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Cargo package
        if: env.NEXT_VERSION != env.PREV_VERSION
        working-directory: utoipauto-core
        run: |
          echo "Releasing version: $NEXT_VERSION"
          echo "Published version: $PREV_VERSION"
          echo "Cargo Packaging..."
          cargo package

      - name: Publish utoipauto-core
        if: env.NEXT_VERSION != env.PREV_VERSION
        working-directory: utoipauto-core
        run: |
          echo "Cargo Publishing..."
          cargo publish --no-verify
          echo "New version $NEXT_VERSION has been published"

  utoipauto-macro:
    needs: utoipauto-core
    runs-on: ubuntu-latest
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get releasing version
        working-directory: utoipauto-macro
        run: echo NEXT_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_ENV

      - name: Check published version
        run: echo PREV_VERSION=$(cargo search utoipauto-macro --limit 1 | sed -nE 's/^[^"]*"//; s/".*//1p' -) >> $GITHUB_ENV

      - name: Cargo login
        if: env.NEXT_VERSION != env.PREV_VERSION
        run: cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Cargo package
        if: env.NEXT_VERSION != env.PREV_VERSION
        working-directory: utoipauto-macro
        run: |
          echo "Releasing version: $NEXT_VERSION"
          echo "Published version: $PREV_VERSION"
          echo "Cargo Packaging..."
          cargo package

      - name: Publish utoipauto-macro
        if: env.NEXT_VERSION != env.PREV_VERSION
        working-directory: utoipauto-macro
        run: |
          echo "Cargo Publishing..."
          cargo publish --no-verify
          echo "New version $NEXT_VERSION has been published"

  utoipauto:
    needs: utoipauto-macro
    runs-on: ubuntu-latest
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get releasing version
        run: echo NEXT_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_ENV

      - name: Check published version
        run: echo PREV_VERSION=$(cargo search utoipauto --limit 1 | sed -nE 's/^[^"]*"//; s/".*//1p' -) >> $GITHUB_ENV

      - name: Cargo login
        if: env.NEXT_VERSION != env.PREV_VERSION
        run: cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Cargo package
        if: env.NEXT_VERSION != env.PREV_VERSION
        run: |
          echo "Releasing version: $NEXT_VERSION"
          echo "Published version: $PREV_VERSION"
          echo "Cargo Packaging..."
          cargo package

      - name: Publish utoipauto
        if: env.NEXT_VERSION != env.PREV_VERSION
        run: |
          echo "Cargo Publishing..."
          cargo publish --no-verify
          echo "New version $NEXT_VERSION has been published"
